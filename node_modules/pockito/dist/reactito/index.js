'use strict';

var _Listenable = require('../listenable/Listenable');

var _Listenable2 = _interopRequireDefault(_Listenable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var StateInjector = function StateInjector(component) {
    return function (value, lastValue, propName) {
        return component.setState(_defineProperty({}, propName, value));
    };
};

function listenWhileMounted(component, props) {
    component.state = component.state || {};

    var originalComponentWillUnmount = component.componentWillUnmount;
    var unlisten = this.addListener(StateInjector(component), props);

    component.componentWillUnmount = function () {
        unlisten();

        if (typeof originalComponentWillUnmount === 'function') {
            originalComponentWillUnmount.bind(component)();
        }
    }.bind(component);
}

function listenWhileMountedRemap(component, propsObject) {
    component.state = component.state || {};

    var propsToListenTo = Object.keys(propsObject);
    var mapToNewPropName = function mapToNewPropName(storePropName) {
        return propsObject[storePropName];
    };

    var RemappingStateInjector = function RemappingStateInjector(component) {
        return function (value, lastValue, propName) {
            return component.setState(_defineProperty({}, mapToNewPropName(propName), value));
        };
    };

    var originalComponentWillUnmount = component.componentWillUnmount;
    var unlisten = this.addListener(RemappingStateInjector(component), propsToListenTo);

    component.componentWillUnmount = function () {
        unlisten();

        if (typeof originalComponentWillUnmount === 'function') {
            originalComponentWillUnmount.bind(component)();
        }
    }.bind(component);
}

var Listenable = function (_PockitoListenable) {
    _inherits(Listenable, _PockitoListenable);

    function Listenable() {
        var _ref;

        _classCallCheck(this, Listenable);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var _this = _possibleConstructorReturn(this, (_ref = Listenable.__proto__ || Object.getPrototypeOf(Listenable)).call.apply(_ref, [this].concat(args)));

        _this.listenWhileMounted = listenWhileMounted.bind(_this);
        _this.listenWhileMountedRemap = listenWhileMountedRemap.bind(_this);
        return _this;
    }

    return Listenable;
}(_Listenable2.default);

module.exports = {
    StateInjector: StateInjector,
    listenWhileMounted: listenWhileMounted,
    listenWhileMountedRemap: listenWhileMountedRemap,
    Listenable: Listenable
};